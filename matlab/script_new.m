%addpath('C:\Users\Lukas\Documents\Matlab_packages\fieldtrip')
%ft_defaults

% Script generated by Brainstorm (31-Oct-2020)
index = 0;
% Paths
pth_noiseCov = strcat('C:\Users\Lukas\Documents\projects\eeg_inverse_solutions\matlab\data\epochs\noiseCov_', string(index), '-cov.fif');
pth_datCov = strcat('C:\Users\Lukas\Documents\projects\eeg_inverse_solutions\matlab\data\epochs\dataCov_', string(index), '-cov.fif');
pth_raw = strcat('C:\Users\Lukas\Documents\projects\eeg_inverse_solutions\matlab\data\epochs\sim_', string(1), '-epo.fif');
% Input files
sFiles = [];
SubjectNames = {...
    strcat('Subject', string(index))};

pth_raw_mat = import_raw(pth_raw, 'FIF');


% Process: Import anatomy folder
bst_process('CallProcess', 'process_import_anatomy', [], [], ...
    'subjectname', SubjectNames{1}, ...
    'mrifile',     {'default', 'FSAverage'}, ...
    'nvertices',   5126);

% Process: Create link to raw file
sFiles = bst_process('CallProcess', 'process_import_data_raw', [], [], ...
    'subjectname',    SubjectNames{1}, ...
    'datafile',       {pth_raw, 'FIF'}, ...
    'channelreplace', 1, ...
    'channelalign',   0);

% Start a new report
bst_report('Start', sFiles);

% Process: Create link to raw file
sFiles = bst_process('CallProcess', 'process_import_data_raw', sFiles, [], ...
    'subjectname',    SubjectNames{1}, ...
    'datafile',       {pth_raw, 'FIF'}, ...
    'channelreplace', 1, ...
    'channelalign',   1, ...
    'evtmode',        'value');

% Process: Set channel file
sFiles = bst_process('CallProcess', 'process_import_channel', sFiles, [], ...
    'usedefault',   19, ...  % Colin27: BrainProducts ActiCap 65
    'channelalign', 1, ...
    'fixunits',     1, ...
    'vox2ras',      1);
    
% Add noise Covariance
NoiseCov = import_noisecov([], char(pth_noiseCov));
sFiles.DataCov = NoiseCov;
%sFiles = add_fields(noiseCovStrct, sFiles);

% Add data Covariance
DataCov = import_noisecov([], char(pth_datCov));
sFiles.DataCov = NoiseCov;
%sFiles = add_fields(datCovStrct, sFiles);

% Get BEM from another file (?)
HeadModel = bst_get('HeadModelFile', 'C:\Users\Lukas\Documents\projects\eeg_inverse_solutions\matlab\protocols\Protocol02\data\Subject03\sim_10-epo\headmodel_201102_2244.mat');
sFiles.HeadModel = HeadModel;
% Compute cMEM
sFiles = bst_process('CallProcess', 'process_inverse_mem', sFiles, [], ...
    'comment',     '', ...
    'method',      1, ...  % Maximum Entropy on the Mean (MEM)
    'mem',         struct(...
         'MEMpaneloptions', struct(...
               'InverseMethod', 'MEM', ...
               'automatic',     struct(...
                     'MEMexpert',   0, ...
                     'version',     '2.7.1', ...
                     'last_update', ''), ...
               'clustering',    struct(...
                     'neighborhood_order',   4, ...
                     'MSP_window',           10, ...
                     'clusters_type',        'static', ...
                     'MSP_scores_threshold', 0), ...
               'optional',      struct(...
                     'TimeSegment',     [0, 0.99], ...
                     'groupAnalysis',   0, ...
                     'Baseline',        [], ...
                     'BaselineHistory', {{{{{{{{'within'}}}}}}}}, ...
                     'display',         0, ...
                     'BaselineSegment', [0, 0.3]), ...
               'mandatory',     struct(...
                     'pipeline', 'cMEM'), ...
               'model',         struct(...
                     'active_mean_method', 2, ...
                     'alpha_method',       3, ...
                     'alpha_threshold',    0, ...
                     'initial_lambda',     1), ...
               'solver',        struct(...
                     'spatial_smoothing',  0.6, ...
                     'active_var_mult',    0.05, ...
                     'inactive_var_mult',  0, ...
                     'NoiseCov_method',    2, ...
                     'Optim_method',       'fminunc', ...
                     'parallel_matlab',    0, ...
                     'NoiseCov_recompute', 1))), ...
    'sensortypes', 'EEG', ...
    'output',      1);  % Full results: one per file


% Save and display report
ReportFile = bst_report('Save', sFiles);
bst_report('Open', ReportFile);
% bst_report('Export', ReportFile, ExportDir);

